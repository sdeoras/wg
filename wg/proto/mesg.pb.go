// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mesg.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RunRequest is a list of strings that will be sent to exec.Command as is
type RunRequest struct {
	Commands             []string `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunRequest) Reset()         { *m = RunRequest{} }
func (m *RunRequest) String() string { return proto.CompactTextString(m) }
func (*RunRequest) ProtoMessage()    {}
func (*RunRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_mesg_7c9926452821370a, []int{0}
}
func (m *RunRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunRequest.Unmarshal(m, b)
}
func (m *RunRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunRequest.Marshal(b, m, deterministic)
}
func (dst *RunRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunRequest.Merge(dst, src)
}
func (m *RunRequest) XXX_Size() int {
	return xxx_messageInfo_RunRequest.Size(m)
}
func (m *RunRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunRequest proto.InternalMessageInfo

func (m *RunRequest) GetCommands() []string {
	if m != nil {
		return m.Commands
	}
	return nil
}

// RunResponse is a boolean indicating error and a string message
type RunResponse struct {
	Error                bool     `protobuf:"varint,1,opt,name=error,proto3" json:"error,omitempty"`
	Mesg                 string   `protobuf:"bytes,2,opt,name=mesg,proto3" json:"mesg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunResponse) Reset()         { *m = RunResponse{} }
func (m *RunResponse) String() string { return proto.CompactTextString(m) }
func (*RunResponse) ProtoMessage()    {}
func (*RunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_mesg_7c9926452821370a, []int{1}
}
func (m *RunResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunResponse.Unmarshal(m, b)
}
func (m *RunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunResponse.Marshal(b, m, deterministic)
}
func (dst *RunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunResponse.Merge(dst, src)
}
func (m *RunResponse) XXX_Size() int {
	return xxx_messageInfo_RunResponse.Size(m)
}
func (m *RunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunResponse proto.InternalMessageInfo

func (m *RunResponse) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *RunResponse) GetMesg() string {
	if m != nil {
		return m.Mesg
	}
	return ""
}

type WaitRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitRequest) Reset()         { *m = WaitRequest{} }
func (m *WaitRequest) String() string { return proto.CompactTextString(m) }
func (*WaitRequest) ProtoMessage()    {}
func (*WaitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_mesg_7c9926452821370a, []int{2}
}
func (m *WaitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitRequest.Unmarshal(m, b)
}
func (m *WaitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitRequest.Marshal(b, m, deterministic)
}
func (dst *WaitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitRequest.Merge(dst, src)
}
func (m *WaitRequest) XXX_Size() int {
	return xxx_messageInfo_WaitRequest.Size(m)
}
func (m *WaitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitRequest proto.InternalMessageInfo

type WaitResponse struct {
	Mesg                 string   `protobuf:"bytes,1,opt,name=mesg,proto3" json:"mesg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitResponse) Reset()         { *m = WaitResponse{} }
func (m *WaitResponse) String() string { return proto.CompactTextString(m) }
func (*WaitResponse) ProtoMessage()    {}
func (*WaitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_mesg_7c9926452821370a, []int{3}
}
func (m *WaitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitResponse.Unmarshal(m, b)
}
func (m *WaitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitResponse.Marshal(b, m, deterministic)
}
func (dst *WaitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitResponse.Merge(dst, src)
}
func (m *WaitResponse) XXX_Size() int {
	return xxx_messageInfo_WaitResponse.Size(m)
}
func (m *WaitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaitResponse proto.InternalMessageInfo

func (m *WaitResponse) GetMesg() string {
	if m != nil {
		return m.Mesg
	}
	return ""
}

func init() {
	proto.RegisterType((*RunRequest)(nil), "proto.RunRequest")
	proto.RegisterType((*RunResponse)(nil), "proto.RunResponse")
	proto.RegisterType((*WaitRequest)(nil), "proto.WaitRequest")
	proto.RegisterType((*WaitResponse)(nil), "proto.WaitResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExecClient is the client API for Exec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecClient interface {
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error)
	Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*WaitResponse, error)
}

type execClient struct {
	cc *grpc.ClientConn
}

func NewExecClient(cc *grpc.ClientConn) ExecClient {
	return &execClient{cc}
}

func (c *execClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (*RunResponse, error) {
	out := new(RunResponse)
	err := c.cc.Invoke(ctx, "/proto.Exec/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *execClient) Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*WaitResponse, error) {
	out := new(WaitResponse)
	err := c.cc.Invoke(ctx, "/proto.Exec/Wait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecServer is the server API for Exec service.
type ExecServer interface {
	Run(context.Context, *RunRequest) (*RunResponse, error)
	Wait(context.Context, *WaitRequest) (*WaitResponse, error)
}

func RegisterExecServer(s *grpc.Server, srv ExecServer) {
	s.RegisterService(&_Exec_serviceDesc, srv)
}

func _Exec_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exec/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecServer).Run(ctx, req.(*RunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Exec_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Exec/Wait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecServer).Wait(ctx, req.(*WaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Exec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Exec",
	HandlerType: (*ExecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Exec_Run_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _Exec_Wait_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mesg.proto",
}

func init() { proto.RegisterFile("mesg.proto", fileDescriptor_mesg_7c9926452821370a) }

var fileDescriptor_mesg_7c9926452821370a = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x4e, 0x3d, 0xcf, 0x82, 0x30,
	0x10, 0x7e, 0xcb, 0xc7, 0x1b, 0x38, 0x74, 0xf0, 0x74, 0x20, 0x4c, 0xa4, 0x53, 0x27, 0x12, 0x75,
	0xf0, 0x17, 0xf8, 0x07, 0xba, 0x38, 0x23, 0x36, 0x86, 0x81, 0x16, 0x5b, 0x48, 0xfc, 0xf9, 0x86,
	0x96, 0x0a, 0x4e, 0x77, 0xcf, 0x73, 0xf7, 0x7c, 0x00, 0x74, 0xc2, 0x3c, 0xab, 0x5e, 0xab, 0x41,
	0x61, 0x6c, 0x07, 0x65, 0x00, 0x7c, 0x94, 0x5c, 0xbc, 0x46, 0x61, 0x06, 0x2c, 0x20, 0x69, 0x54,
	0xd7, 0xd5, 0xf2, 0x61, 0xf2, 0xa0, 0x0c, 0x59, 0xca, 0xbf, 0x98, 0x5e, 0x20, 0xb3, 0x9f, 0xa6,
	0x57, 0xd2, 0x08, 0x3c, 0x40, 0x2c, 0xb4, 0x56, 0x3a, 0x27, 0x25, 0x61, 0x09, 0x77, 0x00, 0x11,
	0xa2, 0x29, 0x23, 0x0f, 0x4a, 0xc2, 0x52, 0x6e, 0x77, 0xba, 0x85, 0xec, 0x56, 0xb7, 0xc3, 0x9c,
	0x41, 0x29, 0x6c, 0x1c, 0x9c, 0x8d, 0xbc, 0x84, 0x2c, 0x92, 0x53, 0x0b, 0xd1, 0xf5, 0x2d, 0x1a,
	0xac, 0x20, 0xe4, 0xa3, 0xc4, 0x9d, 0xeb, 0x5c, 0x2d, 0x4d, 0x0b, 0x5c, 0x53, 0xce, 0x89, 0xfe,
	0xe1, 0x11, 0xa2, 0xc9, 0x1b, 0xfd, 0x75, 0x95, 0x5b, 0xec, 0x7f, 0x38, 0x2f, 0xb9, 0xff, 0x5b,
	0xf6, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xda, 0xdd, 0xff, 0x1c, 0x01, 0x00, 0x00,
}
